{% macro nodeprovider(provider) -%}
  {% if let Some(id) = provider.id %}{{id}} {% endif -%}
  {% if let Some(account) = provider.reward_account %}(reward account {{account.hash|hex}}) {% endif -%}
with {{a.amount_e8s|tokens_e8s("ICP")}} {#+ -#}
  {% if let Some(mode) = a.reward_mode -%}
  {% match mode -%}
  {% when RewardToAccount with (account) -%}
    {% if let Some(to) = account.to_account -%}
to account {{to.hash|hex}}{% else %}
to unknown account{% endif %}
  {% when RewardToNeuron with (n) -%}
to neuron with {{n.dissolve_delay_seconds|dur_seconds}} dissolve delay
  {% endmatch -%}
{% endmacro -%}
"{{proposal.title}}" ({{proposal.topic|fmt("{:?}")}})
Summary: "{{proposal.summary}}"
{% if !proposal.url.is_empty() -%}
URL: {{proposal.url}}
{% endif -%}
{% if let Some(action) = proposal.action -%}
Proposed action: {#+ -#}
{% match action -%}
{% when RegisterKnownNeuron with (a) -%}
Register known neuron{% if let Some(id) = a.id %} {{id.id}}{% endif %}
  {%- if let Some(data) = a.known_neuron_data %} as {{data.name}}
  {%- if let Some(desc) = data.description %} "{{desc}}"{% endif %}{% endif %}
{% when ApproveGenesisKyc with (a) -%}
Approve principals {{a.principals|join(", ")}} for Genesis KYC
{% when AddNodeProvider with (a) -%}{% let change = a.change.context("node provider change was null")? -%}
  {% match change -%}
  {% when ToAdd with (provider) -%}
Add node provider{% if let Some(id) = provider.id %} {{id}}{% endif %}
  {%- if let Some(reward) = provider.reward_account %} with reward account {{reward.hash|hex}}{% endif %}
  {% when ToRemove with (provider) -%}
Remove node provider{% if let Some(id) = provider.id %} {{id}}{% endif %}
  {%- if let Some(reward) = provider.reward_account %} with reward account {{reward.hash|hex}}{% endif %}
  {% endmatch -%}
{% when ExecuteNnsFunction with (a) -%}{% let (canister_id, function) = a.canister_and_function().map_err(|e| anyhow!(e.error_message))? -%}
Execute NNS function {{a.nns_function()|fmt("{:?}")}}
Payload: {{a.payload|candid_payload(canister_id, function)}}
{% when Motion with (a) -%}
"{{a.motion_text}}" (motion)
{% when ManageNetworkEconomics with (a) -%}
Update network economics
  {% if a.max_proposals_to_keep_per_topic != 0 -%}
  New maximum proposals to keep, per topic: {{a.max_proposals_to_keep_per_topic}}
  {% endif -%}
  {% if a.maximum_node_provider_rewards_e8s != 0 -%}
  New maximum node provider reward: {{a.maximum_node_provider_rewards_e8s|tokens_e8s("ICP")}}
  {% endif -%}
  {% if a.minimum_icp_xdr_rate != 0 -%}
  New minimum ICP/SDR conversion rate: 1 ICP <> {{a.minimum_icp_xdr_rate|num_ufixed(2)}} XDR
  {% endif -%}
  {% if a.neuron_management_fee_per_proposal_e8s != 0 -%}
  New cost for making "manage neuron" proposals: {{a.neuron_management_fee_per_proposal_e8s|tokens_e8s("ICP")}}
  {% endif -%}
  {% if a.neuron_minimum_stake_e8s != 0 -%}
  New minimum stake for neurons: {{a.neuron_minimum_stake_e8s|tokens_e8s("ICP")}}
  {% endif -%}
  {% if a.neuron_spawn_dissolve_delay_seconds != 0 -%}
  New dissolve delay for spawned-maturity neurons: {{a.neuron_spawn_dissolve_delay_seconds|dur_seconds}}
  {% endif -%}
  {% if a.transaction_fee_e8s != 0 -%}
  New ICP transaction fee: {{a.transaction_fee_e8s|tokens_e8s("ICP")}}
  {% endif -%}
  {% if a.reject_cost_e8s != 0 -%}
  New proposal rejection cost: {{a.reject_cost_e8s|tokens_e8s("ICP")}}
  {% endif -%}
  {% if let Some(extra) = a.neurons_fund_economics -%}
    {% if let Some(max) = extra.maximum_icp_xdr_rate -%}
    New maximum ICP/SDR conversion rate for the community fund: {{max.basis_points()|num_ufixed(2)}}%
    {% endif -%}
    {% if let Some(min) = extra.minimum_icp_xdr_rate -%}
    New minimum ICP/SDR conversion rate for the community fund: {{min.basis_points()|num_ufixed(2)}}%
    {% endif -%}
    {% if let Some(max) = extra.max_theoretical_neurons_fund_participation_amount_xdr -%}
    New maximum theoretical community fund participation amount: {{max.human_readable()}} XDR
    {% endif -%}
    {% if let Some(extra) = extra.neurons_fund_matched_funding_curve_coefficients -%}
      {% if let Some(threshold) = extra.contribution_threshold_xdr -%}
      New SNS participation threshold to receive any community fund contributions: {{threshold.human_readable()}} XDR
      {% endif -%}
      {% if let Some(milestone) = extra.one_third_participation_milestone_xdr -%}
      New SNS participation milestone to receive 1/3 community fund contribution: {{milestone.human_readable()}} XDR
      {% endif -%}
      {% if let Some(milestone) = extra.full_participation_milestone_xdr -%}
      New SNS participation milestone to receive full community fund contribution: {{milestone.human_readable()}} XDR
      {% endif -%}
    {% endif -%}
  {% endif -%}
{% when RewardNodeProvider with (a) -%}
Reward node provider {% if let Some(provider) = a.node_provider -%}{% call nodeprovider(provider) %}{% endif %}
{% when RewardNodeProviders with (a) -%}
{% if a.use_registry_provided_rewards() -%}
  {% for reward in a.rewards -%}
  {% if let Some(provider) = reward.node_provider %}{% if let Some(id) = provider.id %}{{id}}{% endif %}{% endif -%}
  {% if !loop.last %}, {% endif -%}
  {% endfor %}
{% else -%}
Reward node providers
{% for reward in a.rewards -%}
- {% if let Some(provider) = reward.node_provider %}{% call nodeprovider(provider) %}{% else %}[unknown]{% endif %}
{% endfor -%}
{% when SetDefaultFollowees with (a) -%}
Set default followees
{% for (topic, followees) in a.followees -%}
For {{self::Topic::try_from(topic).unwrap_or_default()|fmt("{:?}")}}: {{followees.followees|join(", ")}}
{% endfor -%}
{% when InstallCode with (a) -%}{% let canister_id = a.canister_and_function().map_err(|e| anyhow!(e))?.0 -%}{% match a.install_mode() -%}
  {% when Unspecified %}Install (unspecified mode) {% when Install %}Install {% when Reinstall %}Reinstall {% when Upgrade %}Upgrade {% endmatch -%}
canister {{canister_id|nns_canister_name}}
WASM blob hash: {{Sha256::digest(a.wasm_module())|hex}}
{% if a.skip_stopping_before_installing() -%}
Canister will NOT be stopped before installing new WASM
{% endif -%}
{% if let Some(arg) = a.arg -%}
Init args: {{arg|candid_payload(canister_id, ".")}}
{% endif -%}
{% when StopOrStartCanister with (a) -%}{% let canister_id = a.canister_and_function().map(|e| anyhow!(e))?.0 -%}{% match a.action() -%}
  {% when Start %}Start {% when Stop %}Stop {% when Unspecified %}Start/stop (unspecified) {% endmatch -%}
canister {{canister_id|nns_canister_name}}
{% when UpdateCanisterSettings with (a) -%}{% let canister_id = a.canister_and_function().map(|e| anyhow!(e))?.0 -%}{% let settings = a.settings.unwrap() -%}
Update settings of canister {{canister_id|nns_canister_name}}
{% if let Some(controllers) = settings.controllers -%}
Controllers: {% for controller in controllers %}{{controller|nns_canister_name}}{% if !loop.last %}, {% endif %}{% endfor -%}
{% endif -%}
{% if let Some(freezing) = settings.freezing_threshold -%}
Freezing threshold: {{freezing|dur_seconds}}
{% endif -%}
{% if let Some(memory) = settings.memory_allocation -%}
Memory allocation: {{memory}}%
{% endif -%}
{% if let Some(compute) = settings.compute_allocation -%}
Compute allocation: {{compute}}%
{% endif -%}
{% if settings.log_visibility.is_some() -%}
Log visibility: {{settings.log_visibility()|fmt("{:?}")}}
{% endif -%}
{% if let Some(limit) = settings.wasm_memory_limit -%}
WASM memory limit: {{limit|bytes}}
{% endif -%}
{% when ManageNeuron with (a) -%}
  {% macro neuron %}{% let neuron = a.get_neuron_id_or_subaccount().map_err(|e| anyhow!(e.error_message))?.context("neuron ID was null")? -%}
    {% match neuron %}{% when NeuronId with (i) %}{{i.id}}{% when Subaccount with (s) %}with subaccount {{s|hex}}{% endmatch -%}
  {% endmacro -%}
  {% match a.command.context("command was null")? -%}
  {% when ClaimOrRefresh with (_) -%}
Refresh the stake of neuron {% call neuron %}
  {% when Disburse with (c) -%}
    {% if let Some(amount) = c.amount -%}
Disburse {{amount.e8s|tokens_e8s("ICP")}} from neuron {% call neuron %}
    {%- else -%}
Disburse neuron {% call neuron %}
    {%- endif -%}
    {% if let Some(to) = c.to_account %} to account {{to.hash|hex}}{% endif %}
  {% when DisburseToNeuron with (c) -%}
Disburse {{c.amount_e8s|tokens_e8s("ICP")}} from neuron {% call neuron %} to a new{% if c.kyc_verified %} (KYC verified){% endif %} neuron
    {%- if let Some(controller) = c.new_controller %} owned by {{controller}}{% endif -%}
    with dissolve delay {{c.dissolve_delay_seconds|dur_seconds}}
  {% when Follow with (c) -%}
Configure neuron {% call neuron %} to follow {% for followee in followees %}{{followee.id}}{% if !loop.last %}, {% endif %}{% endfor %}
{#- +#} for proposals of type {{c.topic()|fmt("{:?}")}}
  {% when MakeProposal (c) -%} {{bail!("nested proposals not supported")}}
  {% when Merge with (c) -%}
    {% if let Some(source) = c.source_neuron_id -%}
Merge neuron {{source.id}} into neuron {% call neuron %}
    {% else -%}
Merge into neuron {% call neuron %}
    {% endif -%}
  {% when MergeMaturity with (c) -%}
Merge {{c.percentage_to_merge}}% of maturity into the stake of neuron {% call neuron %}
  {% endmatch %}
{% endmatch -%}
{% endif -%}
